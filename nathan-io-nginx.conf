##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	server_name nathan.io;
	listen 80 default_server;
	listen [::]:80 default_server;
	return  301 https://$server_name$request_uri;
 }

server {  
	#server_name nathan.io
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        ssl_certificate /etc/letsencrypt/live/nathan.io/fullchain.pem;
    	ssl_certificate_key /etc/letsencrypt/live/nathan.io/privkey.pem;
    	ssl_session_timeout 10m;
    	ssl_session_cache shared:SSL:10m;
    	ssl_session_tickets off;
    	ssl_dhparam /etc/nginx/dhparam.pem;


	ssl_protocols TLSv1.2;
	ssl_prefer_server_ciphers on;
   	#ssl_ciphers 'AES256+EECDH:AES256+EDH:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
	ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS';
	ssl_ecdh_curve secp384r1;
	
	add_header Strict-Transport-Security max-age=15768000;
	ssl_stapling on;
    	ssl_stapling_verify on;
    	## verify chain of trust of OCSP response using Root CA and Intermediate certs
    	#ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
    	ssl_trusted_certificate /etc/letsencrypt/live/nathan.io/chain.pem;
   	resolver 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844];
    	resolver_timeout 10;
	
	root /var/www/;

	# Add index.php to the list if you are using PHP
	index index.html index.htm;

	gzip on;
	gzip_proxied any;
	gzip_vary on;
	gzip_min_length 128;
	gzip_comp_level 6;
	gzip_types
    		application/atom+xml
    		application/javascript
    		application/json
    		application/rss+xml
    		application/vnd.ms-fontobject
    		application/x-font-ttf
    		application/x-web-app-manifest+json
    		application/xhtml+xml
    		application/xml
    		font/opentype
    		image/svg+xml
    		image/x-icon
    		text/css
    		text/plain
   		 text/x-component;

	location ~* \.(css|js|gif|jpe?g|png|woff|woff2)$ {
 		expires 168h;
  		add_header Pragma public;
  		add_header Cache-Control "public, must-revalidate, proxy-revalidate";
	}

#	location / {
#		# First attempt to serve request as file, then
#		# as directory, then fall back to displaying a 404.
#		try_files $uri $uri/ =404;
#	}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
